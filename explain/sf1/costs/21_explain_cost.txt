 Sort  (cost=178764.58..178764.59 rows=1 width=34)
   ->  GroupAggregate  (cost=178764.55..178764.57 rows=1 width=34)
         ->  Sort  (cost=178764.55..178764.56 rows=1 width=26)
               ->  Nested Loop  (cost=1260.72..178764.54 rows=1 width=26)
                     ->  Nested Loop Semi Join  (cost=1260.30..178764.03 rows=1 width=42)
                           ->  Gather  (cost=1259.86..178762.98 rows=1 width=42)
                                 ->  Nested Loop Anti Join  (cost=259.86..177762.88 rows=1 width=42)
                                       ->  Hash Join  (cost=259.43..156471.84 rows=33151 width=42)
                                             ->  Parallel Seq Scan on lineitem l1  (cost=0.00..152755.00 rows=833573 width=16)
                                             ->  Hash  (cost=254.43..254.43 rows=400 width=30)
                                                   ->  Nested Loop  (cost=7.38..254.43 rows=400 width=30)
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                         ->  Bitmap Heap Scan on supplier  (cost=7.38..249.12 rows=400 width=38)
                                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..7.29 rows=400 width=0)
                                       ->  Index Scan using idx_lineitem_orderkey on lineitem l3  (cost=0.43..1.08 rows=6 width=16)
                           ->  Index Scan using idx_lineitem_orderkey on lineitem l2  (cost=0.43..1.03 rows=17 width=16)
                     ->  Index Scan using orders_pkey on orders  (cost=0.43..0.51 rows=1 width=4)

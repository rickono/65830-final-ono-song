explain -- $ID$
-- TPC-H/TPC-R Minimum Cost Supplier Query (Q2)
-- Functional Query Definition
-- Approved February 1998
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 15
	and p_type like '%BRASS'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'EUROPE'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1746966.65..1746966.65 rows=1 width=192)
   Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
   ->  Merge Join  (cost=646541.96..1746966.64 rows=1 width=192)
         Merge Cond: (part.p_partkey = partsupp.ps_partkey)
         Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
         ->  Gather Merge  (cost=1000.45..87253.57 rows=7328 width=30)
               Workers Planned: 2
               ->  Parallel Index Scan using part_pkey on part  (cost=0.43..85407.72 rows=3053 width=30)
                     Filter: (((p_type)::text ~~ '%BRASS'::text) AND (p_size = 15))
         ->  Materialize  (cost=645541.51..653541.97 rows=1600093 width=176)
               ->  Sort  (cost=645541.51..649541.74 rows=1600093 width=176)
                     Sort Key: partsupp.ps_partkey
                     ->  Nested Loop  (cost=42.10..207199.13 rows=1600093 width=176)
                           ->  Nested Loop  (cost=41.67..2235.43 rows=20000 width=166)
                                 ->  Nested Loop  (cost=0.14..13.95 rows=5 width=30)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Index Scan using nation_pkey on nation  (cost=0.14..12.51 rows=25 width=38)
                                       ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                             ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                   Filter: (r_name = 'EUROPE'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=41.53..404.30 rows=4000 width=148)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..40.53 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
                           ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..9.44 rows=81 width=22)
                                 Index Cond: (ps_suppkey = supplier.s_suppkey)
         SubPlan 1
           ->  Aggregate  (cost=170.91..170.92 rows=1 width=32)
                 ->  Nested Loop  (cost=0.86..170.90 rows=4 width=6)
                       Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                       ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                             Filter: (r_name = 'EUROPE'::bpchar)
                       ->  Nested Loop  (cost=0.86..169.60 rows=19 width=14)
                             ->  Nested Loop  (cost=0.72..166.67 rows=19 width=14)
                                   ->  Index Scan using idx_partsupp_partkey on partsupp partsupp_1  (cost=0.43..8.78 rows=19 width=14)
                                         Index Cond: (ps_partkey = part.p_partkey)
                                   ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..8.31 rows=1 width=12)
                                         Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                             ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=12)
                                   Index Cond: (n_nationkey = supplier_1.s_nationkey)
(40 rows)


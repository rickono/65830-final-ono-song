explain -- $ID$
-- TPC-H/TPC-R Product Type Profit Measure Query (Q9)
-- Functional Query Definition
-- Approved February 1998
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%green%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=232954.37..232960.79 rows=47 width=90)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=232954.37..232959.68 rows=40 width=90)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=231954.34..231955.04 rows=20 width=90)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=231954.34..231954.39 rows=20 width=81)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=3.29..231953.91 rows=20 width=81)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=1.73..231952.24 rows=20 width=35)
                                 ->  Nested Loop  (cost=1.29..231942.76 rows=20 width=39)
                                       ->  Nested Loop  (cost=1.00..231936.56 rows=20 width=47)
                                             ->  Nested Loop  (cost=0.43..148175.23 rows=67345 width=26)
                                                   ->  Parallel Seq Scan on part  (cost=0.00..51377.32 rows=16835 width=4)
                                                         Filter: ((p_name)::text ~~ '%green%'::text)
                                                   ->  Index Scan using idx_partsupp_partkey on partsupp  (cost=0.43..5.56 rows=19 width=22)
                                                         Index Cond: (ps_partkey = part.p_partkey)
                                             ->  Index Scan using idx_lineitem_part_supp on lineitem  (cost=0.56..1.23 rows=1 width=41)
                                                   Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                       ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.31 rows=1 width=12)
                                             Index Cond: (s_suppkey = lineitem.l_suppkey)
                                 ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=8)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(26 rows)


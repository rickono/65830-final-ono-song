explain -- $ID$
-- TPC-H/TPC-R Global Sales Opportunity Query (Q22)
-- Functional Query Definition
-- Approved February 1998
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('13', '31', '23', '29', '30', '18', '17')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
                        ('13', '31', '23', '29', '30', '18', '17')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as custsale
group by
	cntrycode
order by
	cntrycode;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=58038.28..58563.67 rows=3937 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1 (returns $1)
     ->  Finalize Aggregate  (cost=27746.20..27746.21 rows=1 width=32)
           ->  Gather  (cost=27745.98..27746.19 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=26745.98..26745.99 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..26721.12 rows=9942 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{13,31,23,29,30,18,17}'::text[])))
   ->  Gather Merge  (cost=30292.07..30715.76 rows=3280 width=72)
         Workers Planned: 2
         Params Evaluated: $1
         ->  Partial GroupAggregate  (cost=29292.04..29337.14 rows=1640 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=29292.04..29296.14 rows=1640 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Nested Loop Anti Join  (cost=0.43..29204.47 rows=1640 width=38)
                           ->  Parallel Seq Scan on customer  (cost=0.00..26721.12 rows=3646 width=26)
                                 Filter: ((c_acctbal > $1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{13,31,23,29,30,18,17}'::text[])))
                           ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..3.30 rows=18 width=8)
                                 Index Cond: (o_custkey = customer.c_custkey)
(21 rows)


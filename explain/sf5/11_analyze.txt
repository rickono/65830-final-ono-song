explain analyze -- $ID$
-- TPC-H/TPC-R Important Stock Identification Query (Q11)
-- Functional Query Definition
-- Approved February 1998
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'GERMANY'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) * 0.0001
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'GERMANY'
		)
order by
	value desc;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=57018.21..57148.52 rows=52124 width=40) (actual time=2979.508..2987.126 rows=0 loops=1)
   Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
   Sort Method: quicksort  Memory: 25kB
   InitPlan 1 (returns $2)
     ->  Finalize Aggregate  (cost=15178.72..15178.73 rows=1 width=32) (actual time=91.869..91.886 rows=1 loops=1)
           ->  Gather  (cost=15178.60..15178.71 rows=1 width=32) (actual time=91.861..91.879 rows=2 loops=1)
                 Workers Planned: 1
                 Workers Launched: 1
                 ->  Partial Aggregate  (cost=14178.60..14178.61 rows=1 width=32) (actual time=90.382..90.384 rows=1 loops=2)
                       ->  Nested Loop  (cost=1.75..13488.72 rows=91984 width=10) (actual time=0.075..81.882 rows=80120 loops=2)
                             ->  Hash Join  (cost=1.32..1535.73 rows=1176 width=4) (actual time=0.056..3.600 rows=1002 loops=2)
                                   Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Seq Scan on supplier supplier_1  (cost=0.00..1444.12 rows=29412 width=12) (actual time=0.004..1.591 rows=25000 loops=2)
                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.019..0.020 rows=1 loops=2)
                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4) (actual time=0.016..0.017 rows=1 loops=2)
                                               Filter: (n_name = 'GERMANY'::bpchar)
                                               Rows Removed by Filter: 24
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.43..9.38 rows=78 width=18) (actual time=0.003..0.074 rows=80 loops=2003)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Finalize GroupAggregate  (cost=22072.39..37755.65 rows=52124 width=40) (actual time=2979.502..2987.102 rows=0 loops=1)
         Group Key: partsupp.ps_partkey
         Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > $2)
         Rows Removed by Filter: 151215
         ->  Gather Merge  (cost=22072.39..34720.19 rows=91984 width=40) (actual time=2802.872..2848.041 rows=155560 loops=1)
               Workers Planned: 1
               Workers Launched: 1
               ->  Partial GroupAggregate  (cost=21072.38..23371.98 rows=91984 width=40) (actual time=2801.513..2829.708 rows=77780 loops=2)
                     Group Key: partsupp.ps_partkey
                     ->  Sort  (cost=21072.38..21302.34 rows=91984 width=18) (actual time=2801.502..2803.436 rows=80120 loops=2)
                           Sort Key: partsupp.ps_partkey
                           Sort Method: quicksort  Memory: 6530kB
                           Worker 0:  Sort Method: quicksort  Memory: 6444kB
                           ->  Nested Loop  (cost=1.75..13488.72 rows=91984 width=18) (actual time=0.356..2787.713 rows=80120 loops=2)
                                 ->  Hash Join  (cost=1.32..1535.73 rows=1176 width=4) (actual time=0.040..6.024 rows=1002 loops=2)
                                       Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..1444.12 rows=29412 width=12) (actual time=0.006..2.821 rows=25000 loops=2)
                                       ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.017..0.018 rows=1 loops=2)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.013..0.015 rows=1 loops=2)
                                                   Filter: (n_name = 'GERMANY'::bpchar)
                                                   Rows Removed by Filter: 24
                                 ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.43..9.38 rows=78 width=26) (actual time=0.096..2.771 rows=80 loops=2003)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
 Planning Time: 3.187 ms
 Execution Time: 2987.267 ms
(46 rows)


explain analyze -- $ID$
-- TPC-H/TPC-R Volume Shipping Query (Q7)
-- Functional Query Definition
-- Approved February 1998
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY')
				or (n1.n_name = 'GERMANY' and n2.n_name = 'FRANCE')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=763024.70..766115.77 rows=10052 width=116) (actual time=10867.758..10898.787 rows=4 loops=1)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Gather Merge  (cost=763024.70..765713.69 rows=20104 width=116) (actual time=10867.101..10898.776 rows=12 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial GroupAggregate  (cost=762024.67..762393.17 rows=10052 width=116) (actual time=10862.565..10864.474 rows=4 loops=3)
               Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Sort  (cost=762024.67..762055.78 rows=12441 width=96) (actual time=10861.930..10862.153 rows=9813 loops=3)
                     Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                     Sort Method: quicksort  Memory: 1300kB
                     Worker 0:  Sort Method: quicksort  Memory: 1306kB
                     Worker 1:  Sort Method: quicksort  Memory: 1308kB
                     ->  Parallel Hash Join  (cost=1567.49..761178.51 rows=12441 width=96) (actual time=4.538..10854.480 rows=9813 loops=3)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           Join Filter: (((n1.n_name = 'FRANCE'::bpchar) AND (n2.n_name = 'GERMANY'::bpchar)) OR ((n1.n_name = 'GERMANY'::bpchar) AND (n2.n_name = 'FRANCE'::bpchar)))
                           Rows Removed by Join Filter: 9837
                           ->  Nested Loop  (cost=2.27..758179.73 rows=298953 width=50) (actual time=0.692..10798.907 rows=244874 loops=3)
                                 ->  Nested Loop  (cost=1.83..65227.01 rows=250003 width=30) (actual time=0.287..651.272 rows=201381 loops=3)
                                       ->  Hash Join  (cost=1.40..22603.78 rows=25000 width=30) (actual time=0.249..309.471 rows=20081 loops=3)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..21643.00 rows=312500 width=12) (actual time=0.216..288.836 rows=250000 loops=3)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30) (actual time=0.021..0.023 rows=2 loops=3)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30) (actual time=0.004..0.007 rows=2 loops=3)
                                                         Filter: ((n_name = 'GERMANY'::bpchar) OR (n_name = 'FRANCE'::bpchar))
                                                         Rows Removed by Filter: 23
                                       ->  Index Scan using idx_orders_custkey on orders  (cost=0.43..1.52 rows=18 width=12) (actual time=0.002..0.016 rows=10 loops=60244)
                                             Index Cond: (o_custkey = customer.c_custkey)
                                 ->  Index Scan using idx_lineitem_orderkey on lineitem  (cost=0.44..2.54 rows=23 width=32) (actual time=0.049..0.050 rows=1 loops=604143)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       Rows Removed by Filter: 3
                           ->  Parallel Hash  (cost=1535.81..1535.81 rows=2353 width=30) (actual time=3.305..3.306 rows=1331 loops=3)
                                 Buckets: 4096  Batches: 1  Memory Usage: 320kB
                                 ->  Hash Join  (cost=1.40..1535.81 rows=2353 width=30) (actual time=0.040..3.123 rows=1331 loops=3)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Parallel Seq Scan on supplier  (cost=0.00..1444.12 rows=29412 width=12) (actual time=0.006..1.805 rows=16667 loops=3)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30) (actual time=0.024..0.024 rows=2 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30) (actual time=0.019..0.021 rows=2 loops=3)
                                                   Filter: ((n_name = 'FRANCE'::bpchar) OR (n_name = 'GERMANY'::bpchar))
                                                   Rows Removed by Filter: 23
 Planning Time: 3.121 ms
 Execution Time: 10898.881 ms
(44 rows)

